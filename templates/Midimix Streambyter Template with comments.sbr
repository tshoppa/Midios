<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>StreamByter-Rules</key>
	<string># A demo for MidiMax usage with drambo

if load # initialization —————————————————————-
  
  Alias 0 TRUE
  Alias 1 FALSE
  Alias 0 OFF
  Alias 1 ON
  
  
  # Variables
  
  # i0, j0, k0, l0 are local vars
  # they can be reused as temporary values
  # NEVER use them while calling subroutines!
  # subrutines may change their values!
  
  Alias L1 chanCom #command with channel 
  Alias L2 isXKey #was a special key handled? TURE or FALSE
  Alias L3 togCount #number of toggled buttons in group
  Alias L4 tLoop #loop counter in group toggle handling
  Alias L5 tbId #index of toggle button in group toggle handling 
  Alias L6 curBank #either BankLeft or BankRight
  
  Alias L7 vType #type of button
  Alias L8 vCC #cc midi command of button
  Alias L9 vStat #status field of button, various application, usually 1 or 0
  Alias LA vOthStat #status field of other banks button 
  Alias LB vVal #value to be send with cc command 0-127
  Alias LC vGrp #group of button if any, used for „toggle all“ and „selection“ (i.e. Radio) buttons
  Alias LD vRef #reference to associated data
  Alias LE vOthRef #reference to associated data of corresponding button in other bank
  Alias LF vChan #channel to be send on
  
  #button radio groups
  Alias 10 s0 #L10
  Alias 11 s1 #L11
  Alias 12 s2 #L12
  Alias 13 s3 #L13
  Alias 14 s4 #L14
  Alias 15 s5 #L15
  Alias 16 s6 #L16
  Alias 17 s7 #L17
  
  #button colletions for toggle button groups
  Alias 18 bg0 #L18
  Alias 20 bg1 #L20
  Alias 28 bg2 #L28
  Alias 30 bg3 #L30
  Alias 38 bg4 #L38
  Alias 40 bg5 #L40
  Alias 48 bg6 #L48
  Alias 50 bg7 #L50
  
  
  #selected Bank options
  Alias 1 bankLeft
  Alias 2 bankRight
  
  
  #button types
  Alias 0 tb # toggle button
  Alias 1 bt # push button
  Alias 2 ta # toggle all button (operate a group of toggle buttons)
  Alias 3 sb # select button (=radio button, one out of a selection is toggled)
  
  #special buttons note ids
  Alias 19 bankLeftBtn
  Alias 1A bankRightBtn
  Alias 1B soloBtn
  
  #button field definitions
  Alias 1 BtnType # type of button tb, bt, ta, sb
  Alias 19 BtnRef # reference to model
  Alias 31 BtnSndVal # Send velocity
  Alias 49 BtnGroup # reference to group if any
  
  #model field definitions
  Alias 1 DataCC # cc to be send
  Alias 31 DataStat # status of button
  Alias 61 DataChan # send channel
  
  #knobs and sliders
  Alias 61 Ctrls #24 knobs and 9 sliders
  Alias 79 CtrlSld #identifier for sliders in movers array
  Alias 82 CtrlChans # channels for knobs and sliders
  Alias 9A CtrlSldChans #identifier for slider channels in movers array
  
  #short conditions for note on, note off and cc
  Define NoteOn MT == 90
  Define NoteOff MT == 80
  Define isCC MT == B0
  
  # special buttons actions
  Define bankLeftBtnPressed M1 == bankLeftBtn
  Define bankRightBtnPressed M1 == bankRightBtn
  Define soloBtnPressed M1 == soloBtn
  
  #current bank state 
  Define isBankLeft curBank == bankLeft
  Define isBankRight curBank == bankRight
  
  
  # button configurations —-
  Alias 0 recChan # receivinig channel
  
  # buttons bank L
  Ass IBtnType = sb tb tb sb tb tb sb tb tb sb tb tb sb tb bt sb tb bt sb tb bt sb tb ta
  Ass IBtnSndVal = 7F 7F 7F 7F 7F 7F 7F 7F 7F 7F 7F 7F 7F 7F 7F 7F 7F 7F 7F 7F 7F 7F 7F 7F
  Ass IBtnGroup = s0 bg0 0 s0 bg0 0 s0 bg0 0 s0 bg0 0 s0 bg0 0 s0 bg0 0 s0 bg0 0 s0 bg0 bg0
  ASS IBtnRef = 1 2 3 4 5 6 7 8 9 A B C D E F 10 11 12 13 14 15 16 17 18
  #,overs
  
  #buttons bank R
  Ass JBtnType = tb bt sb tb bt sb tb bt sb tb bt sb tb bt sb tb bt sb tb bt bt bt bt ta
  Ass JBtnSndVal = 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40
  Ass JBtnGroup = bg1 0 s1 bg1 0 s1 bg1 0 s1 bg1 0 s1 bg1 0 s1 bg1 0 s1 bg1 0 0 0 0 bg1
  ASS JBtnRef = 2 1A 1B 5 1D 1E 8 20 21 B 23 24 E 26 27 11 29 2A 14 2C 2D 17 2F 30
  
  
  # common button model for both banks
  Ass KDataCC = 1 2 3 4 5 6 7 8 9 A B C D E F 10 11 12 13 14 15 16 17 18 19 1A 1B 1C 1D 1E 1F 20 21 22 23 24 25 26 27 28 29 2A 2B 2C 2D 2E 2F 30
  Ass KDataStat = 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  Ass KDataChan = B0 B0 B0 B0 B0 B0 B0 B0 B0 B0 B0 B0 B0 B0 B0 B0 B0 B0 B0 B0 B0 B0 B0 B0 B0 B0 B0 B0 B0 B0 B0 B0 B0 B0 B0 B0 B0 B0 B0 91 91 91 91 91 91 91 91 91
  
  # knobs and slider mappings left and right bank
  Ass ICtrls = 1 2 3 4 5 6 7 8 9 A B C D E F 10 11 12 13 14 15 16 17 18 19 1A 1B 1C 1D 1E 1F 20 21
  Ass ICtrlChans = 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  Ass JCtrls = 1 2 3 4 5 6 7 8 9 A B C D E F 10 11 12 13 14 15 16 17 18 22 23 24 25 26 27 28 29 21
  Ass JCtrlChans = 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  
  # toggle button groups
  Ass Lbg0 = 2 5 8 B E 11 14 17
  Ass Lbg1 = 1 4 7 A D 10 13 16
  # end configuration —-
  
  #set LED with a delay for blinking effects
  Sub setLED ID stat delay
    Mat chanCom = 90 + recChan #MC instead of recChan if should answer on. Original channel
    snd chanCom ID stat +Ddelay
  End
  Sub LED_ON ID
    Mat chanCom = 90 + recChan
    snd chanCom ID ON
  End
  
  Sub LED_OFF ID
    Mat chanCom = 90 + recChan
    snd chanCom ID OFF
  End
  
  Sub getBtnField base index to
    Mat I0 = base + index
    Mat I0 = I0 - 1
    If isBankLeft
      ASS to = II0
    Else
      Ass to = JI0
    End
  End
  
  Sub getOtherBtnField base index to
    Mat I0 = base + index
    Mat I0 = I0 - 1
    If isBankLeft
      ASS to = JI0
    Else
      Ass to = II0
    End
  End
  
  Sub setDataField base index val
    Mat I0 = base + index
    Mat I0 = I0 - 1
    Ass KI0 = val
  End
  
  Sub getDataField base index to
    Mat I0 = base + index
    Mat I0 = I0 - 1
    Ass to = KI0
  End
  
  Sub getDataByButton base btnIdx to
    getBtnField BtnRef btnIdx J0
    getDataField base J0 to
  End
  
  Sub setDataByButton base btnIdx val
    getBtnField BtnRef btnIdx J0
    setDataField base J0 val
  End
  
  
  Sub fireBtn index val
    getBtnField BtnRef index vRef
    getDataField DataCC vRef vCC
    getDataField DataChan vRef vChan
    
    Mat chanCom = B0 + vChan
    Snd chanCom vCC val
  End
  
  Sub getBtnSend index valcc valch
    getBtnField BtnRef index vRef
    getDataField DataCC vRef valcc
    getDataField DataChan vRef valch
  End
  
  Sub fireBtnPressed index
    getBtnSend index vCC vChan
    getBtnField BtnSndVal index vVal
    
    Snd vChan vCC vVal
  End
  
  Sub fireBtnRelease index
    getBtnSend index vCC vChan
    
    Mat I0 = vChan &amp; F0
    If I0 == 90
      Mat J0 = vChan &amp; 0F
      Mat vChan = 80 + J0
    End
    
    Snd vChan vCC 0
  End
  
  # set up buttons and offset according to bank change  
  Sub switchBtnStats targetBank
    Ass curBank = targetBank
    Ass J0 = 1
    While J0 &lt; 19
      getBtnField BtnRef J0 vRef
      getOtherBtnField BtnRef J0 vOthRef
      getDataField DataStat vRef vStat
      getDataField DataStat vOthRef vOthStat
      getBtnField BtnType J0 vType
      If vRef != vOthRef 
        If vStat != vOthStat 
          setLED J0 vStat 0
        End
      End
      
      # for radio buttons set the last selected button
      If vType == sb
        If vStat == ON
            getBtnField BtnGroup J0 vGrp
            Ass K0 = vGrp
            Ass LK0 = J0
        End
      End
      Mat J0 = J0 + 1
    End
  End

  #special keys Bank Left, right and solo
  Sub handleSpecialKeys result
    ASS result = FALSE
    If bankLeftBtnPressed
      If isBankRight
        LED_ON bankLeftBtn
        LED_OFF bankRightBtn
        switchBtnStats bankLeft
      end
      ASS result = TRUE
    End
    
    If bankRightBtnPressed
      if isBankLeft
        LED_ON bankRightBtn
        LED_OFF bankLeftBtn
        switchBtnStats bankRight
      End
      ASS result = TRUE
    End
    
    If soloBtnPressed
      #ignore
      ASS result = TRUE
    End
  End
  
  # initial LED lightshow &amp; setup
  # set all buttons leds off. Might be depending on stat later on (so that initial light up can be defined)
  Ass J0 = 1
  While J0 &lt; 1B
    # LED_OFF J0 #to switch off startup carnival
    LED_ON J0 
    Mat K0 = J0 * $10
    Mat K0 = K0 + $200
    setLED J0 OFF K0
    Mat J0 = J0 + 1
  End
  # bank left is active at start
  setLED bankLeftBtn ON $450
  
  Ass curBank = bankLeft
  
End # end initialization ——————————————————

If NoteOn
  handleSpecialKeys isXKey
  If isXKey == FALSE #no special key detected
    
    getBtnField BtnType M1 vType #get button type from conf
    
    If vType == bt
      LED_ON M1
      fireBtnPressed M1
    Else
      if vType == tb
        
        fireBtnPressed M1
        getBtnField BtnRef M1 vRef #getModel reference
        getDataField DataStat vRef vStat #get data status from conf
        If vStat == ON
          LED_OFF M1
          setDataField DataStat vRef OFF
        Else
          LED_ON M1
          setDataField DataStat vRef ON
        End
      Else
        if vType == sb
          fireBtnPressed M1
        Else
          # toggle group
          LED_ON M1
        End
      End
    End
  End
End

If NoteOff
  If bankLeftBtnPressed
  Else
    If bankRightBtnPressed
    else
      if soloBtnPressed
      else
        # button released
        getBtnField BtnType M1 vType
        getBtnField BtnGroup M1 vGrp
        
        If vType == bt # push button
          fireBtnRelease M1
          LED_OFF M1
        Else
          If vType == ta # toggle group
            LED_OFF M1
            
            # first check if any buttons in group are toggled on
            ass tLoop = 0
            ass togCount = 0
            while tLoop &lt; 8
              mat K0 = vGrp + tLoop
              Ass tbId = LK0
              getDataByButton DataStat tbId vStat
              mat togCount = togCount + vStat
              mat tLoop = tLoop + 1
            end
            if togCount == 8 #all buttons toggled, toggle all off
              ass tLoop = 0
              while tLoop &lt; 8
                mat K0 = vGrp + tLoop
                Ass tbId = LK0
                setDataByButton DataStat tbId OFF
                
                LED_OFF tbId
                fireBtnPressed tbId
                
                mat tLoop = tLoop + 1
              end
            Else
              #toggle those on, that are off
              ass tLoop = 0
              while tLoop &lt; 8
                mat K0 = vGrp + tLoop
                Ass tbId = LK0
                getBtnField BtnRef tbId vRef
                getDataField DataStat vRef vStat
                if vStat == OFF
                  LED_ON tbId
                  setDataField DataStat vRef ON
                  fireBtnPressed tbId
                  
                end
                mat tLoop = tLoop + 1
              end
            End
            
          Else
            If vType == sb #select button
              setDataByButton DataStat M1 ON
              fireBtnRelease M1
              Ass J0 = vGrp
              Ass tbId = LJ0
              If tbId != M1
                If J0 &gt; 0
                  LED_OFF tbId
                  setDataByButton DataStat tbId OFF
                End
              End
              Ass J0 = vGrp
              ass LJ0 = M1
              LED_ON M1
            Else
              # toggle button, action is done in button pressed
              # no button release event on purpose (drambo get‘s confused when mapping)
            End
          End
        End
      End
    End
  End
End

If isCC
  If M1 &lt; 22 #any controller up to 33
    getBtnField Ctrls M1 vCC
    getBtnField CtrlChans M1 vChan
    Mat I0 = B0 + vChan
    Send I0 vCC M2
    Block
  End
End

#finally block all notes
NX = XX +B</string>
</dict>
</plist>
